"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EndOfRunMessage = void 0;
const environment_1 = require("../../utilities/environment");
const print_message_1 = require("../../utilities/print-message");
class EndOfRunMessage {
    constructor(messages, runContext) {
        this.messages = messages;
        this.runContext = runContext;
        this.tasks = [];
        this.patchReporters();
    }
    // We patch reporters temporary. Nx 10 should have a proper way of printing remote cache hits.
    patchReporters() {
        try {
            const reporter = require('@nrwl/workspace/src/tasks-runner/default-reporter');
            const old = reporter.DefaultReporter.prototype.printResults;
            const that = this;
            reporter.DefaultReporter.prototype.printResults = function () {
                old.apply(this, arguments);
                that.printCacheHitsMessage();
            };
        }
        catch (e) { }
        try {
            const reporter = require('@nrwl/workspace/src/tasks-runner/run-one-reporter');
            const old = reporter.RunOneReporter.prototype.printResults;
            const that = this;
            reporter.RunOneReporter.prototype.printResults = function () {
                old.apply(this, arguments);
                that.printCacheHitsMessage();
            };
        }
        catch (e) { }
        try {
            const reporter = require('@nrwl/workspace/src/tasks-runner/empty-reporter');
            const old = reporter.EmptyReporter.prototype.printResults;
            const that = this;
            reporter.EmptyReporter.prototype.printResults = function () {
                old.apply(this, arguments);
                that.printCacheHitsMessage();
            };
        }
        catch (e) { }
    }
    printCacheHitsMessage() {
        if (this.messages.anyErrors)
            return;
        if (environment_1.AGENT_RUNNING_IN_DISTRIBUTED_EXECUTION)
            return;
        const hits = this.tasks
            .filter((t) => this.runContext.statuses[t.hash] === 'remote-cache-hit')
            .map((t) => t.projectName);
        if (hits.length === 0 && !this.runContext.runUrl) {
            return;
        }
        const projects = hits.length === 1 ? hits[0] : `${hits.length} projects`;
        const message = [];
        if (hits.length > 0) {
            message.push(`Results for ${projects} were retrieved from Nx Cloud.`);
        }
        if (this.runContext.runUrl) {
            message.push(`See run details at ${this.runContext.runUrl}`);
        }
        if (message.length > 0) {
            print_message_1.printMessage(message.join(' '));
        }
    }
}
exports.EndOfRunMessage = EndOfRunMessage;
//# sourceMappingURL=end-of-run-message.js.map